generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String @id
  firstName String
  lastName  String
}

model User {
  id        String @id
  firstName String
  lastName  String
  email     String
  photo     String?
  isActive  Boolean @default(true)
  emailVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productReview ProductReview[]
  wishlist      ProductWishlist[]
  productLike   ProductLike[]
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  link      String
  slug      String
  image     String
  createdAt DateTime @default(now())

  subcategory Subcategory[]
  products    Products[]
}

model Subcategory {
  id         Int      @id @default(autoincrement())
  name       String
  link       String
  slug       String
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  products Products[]
}

model Pages {
  id        Int      @id @default(autoincrement())
  name      String
  link      String
  slug      String
  createdAt DateTime @default(now())

  subpage Subpage[]
}

model Subpage {
  id        Int      @id @default(autoincrement())
  name      String
  link      String
  slug      String
  createdAt DateTime @default(now())
  pageId    Int
  page      Pages    @relation(fields: [pageId], references: [id])
}

model Products {
  id          Int           @id @default(autoincrement())
  name        String
  link        String
  slug        String
  createdAt   DateTime      @default(now())
  description String
  fullDescription String?
  price       Decimal       // Base price for display when no variant selected
  salesPrice  Decimal?
  sku         String?       // Base SKU
  isAvailable Boolean       @default(true)
  featured    Boolean       @default(false)
  status      ProductStatus @default(DRAFT)
  materialType String?

  //Relations
  subcategoryId Int
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  categoryId    Int
  category      Category    @relation(fields: [categoryId], references: [id])

  brandId Int
  brand   Brand? @relation(fields: [brandId], references: [id])

  variants        ProductVariant[]
  images          ProductImage[]
  reviews         ProductReview[]
  tags            ProductTag[]
  attributes      ProductAttributeValue[]
  relatedProducts RelatedProduct[]
  wishlist        ProductWishlist[]
  discounts       Discount[]
  likes           ProductLike[]
  productItems    ProductItem[] // Added relation to ProductItem

  @@index([name])
  @@index([price])
  @@index([status])
}

model Brand {
  id          Int      @id @default(autoincrement())
  name        String
  link        String
  slug        String
  logo        String?
  createdAt   DateTime @default(now())
  description String?

  //relations

  products Products[]

  @@index([name])
}

model ProductVariant {
  id   Int    @id @default(autoincrement())
  name String // e.g., "Size", "Color"
  link String
  slug String

  //relations
  product    Products                @relation(fields: [productId], references: [id])
  productId  Int
  values     ProductVariantValue[]

  @@index([name])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  link      String
  slug      String
  altText   String?
  isPrimary Boolean

  //relation

  productId Int
  product   Products @relation(fields: [productId], references: [id])
}

model ProductReviewImage {
  id        Int      @id @default(autoincrement())
  link      String
  slug      String
  createdAt DateTime @default(now())

  //relations
  reviewId Int
  review   ProductReview @relation(fields: [reviewId], references: [id])
}

model ProductReview {
  id        Int      @id @default(autoincrement())
  title     String?
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  images    ProductReviewImage[]

  //relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Products @relation(fields: [productId], references: [id])

  @@index([rating])
}

model ProductLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  //relations
  productId Int
  product   Products @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, productId])
}

model ProductTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  //relations
  productId Int
  product   Products @relation(fields: [productId], references: [id])

  @@index([name])
}

model ProductAttribute {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  //relations
  values ProductAttributeValue[]

  @@index([name])
}

model ProductAttributeValue {
  id    Int    @id @default(autoincrement())
  value String

  //relations
  attributeId Int
  attribute   ProductAttribute @relation(fields: [attributeId], references: [id])

  productId Int
  product   Products       @relation(fields: [productId], references: [id])
}

model RelatedProduct {
  id        Int      @id @default(autoincrement())
  link      String
  slug      String
  productId Int
  product   Products @relation(fields: [productId], references: [id])
}

model ProductWishlist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  //relation
  productId Int
  product   Products @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, productId])
}

model Discount {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String
  description String?
  type        DiscountType
  value       Decimal
  startDate   DateTime
  endDate     DateTime
  products    Products[]
  isActive    Boolean

  @@index([startDate])
  @@index([endDate])
}

model Slide {
  id          Int      @id @default(autoincrement())
  name        String
  title       String
  description String?
  subTitle    String?
  btn         String
  textColor   String?
  image       String
  link        String?
  order       Int?
  slug        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductVariantValue {
  id        Int     @id @default(autoincrement())
  value     String  // e.g., "S", "M", "Red", "Blue"
  hexCode   String? // Only for color variants
  variantId Int
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  
  // Relation to ProductItem (Many-to-Many)
  productItems ProductItem[] 

  @@index([value])
  @@unique([variantId, value])
}

// NEW MODEL: Represents a specific purchasable combination of variant values
model ProductItem {
  id          Int       @id @default(autoincrement())
  sku         String    @unique // Unique SKU for this specific combination
  price       Decimal   // Price for this specific combination
  quantity    Int       // Stock quantity for this specific combination
  createdAt   DateTime  @default(now())

  // Relation to the base product
  productId   Int
  product     Products  @relation(fields: [productId], references: [id])

  // Relation to the specific variant values that define this item (Many-to-Many)
  variantValues ProductVariantValue[]

  @@index([sku])
}
